//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: kernel/protocol/client/model/v1/message/base.proto

package kernel.protocol.client.model.v1;

@kotlin.jvm.JvmName("-initializerequestHeader")
public inline fun requestHeader(block: kernel.protocol.client.model.v1.RequestHeaderKt.Dsl.() -> kotlin.Unit): Base.RequestHeader =
  kernel.protocol.client.model.v1.RequestHeaderKt.Dsl._create(kernel.protocol.client.model.v1.Base.RequestHeader.newBuilder()).apply { block() }._build()
public object RequestHeaderKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: kernel.protocol.client.model.v1.Base.RequestHeader.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: kernel.protocol.client.model.v1.Base.RequestHeader.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): kernel.protocol.client.model.v1.Base.RequestHeader = _builder.build()

    /**
     * <code>string correlation_id = 1;</code>
     */
    public var correlationId: kotlin.String
      @JvmName("getCorrelationId")
      get() = _builder.getCorrelationId()
      @JvmName("setCorrelationId")
      set(value) {
        _builder.setCorrelationId(value)
      }
    /**
     * <code>string correlation_id = 1;</code>
     */
    public fun clearCorrelationId() {
      _builder.clearCorrelationId()
    }

    /**
     * <code>string source_peer_id = 6;</code>
     */
    public var sourcePeerId: kotlin.String
      @JvmName("getSourcePeerId")
      get() = _builder.getSourcePeerId()
      @JvmName("setSourcePeerId")
      set(value) {
        _builder.setSourcePeerId(value)
      }
    /**
     * <code>string source_peer_id = 6;</code>
     */
    public fun clearSourcePeerId() {
      _builder.clearSourcePeerId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun kernel.protocol.client.model.v1.Base.RequestHeader.copy(block: kernel.protocol.client.model.v1.RequestHeaderKt.Dsl.() -> kotlin.Unit): kernel.protocol.client.model.v1.Base.RequestHeader =
  kernel.protocol.client.model.v1.RequestHeaderKt.Dsl._create(this.toBuilder()).apply { block() }._build()

