//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: kernel/protocol/client/model/v1/message/tracker.proto

package kernel.protocol.client.model.v1;

@kotlin.jvm.JvmName("-initializetrackerDeliverIceCandidateMessage")
public inline fun trackerDeliverIceCandidateMessage(block: kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessageKt.Dsl.() -> kotlin.Unit): kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage =
  kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessageKt.Dsl._create(kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.newBuilder()).apply { block() }._build()
public object TrackerDeliverIceCandidateMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage = _builder.build()

    /**
     * <code>string action = 1;</code>
     */
    public var action: kotlin.String
      @JvmName("getAction")
      get() = _builder.getAction()
      @JvmName("setAction")
      set(value) {
        _builder.setAction(value)
      }
    /**
     * <code>string action = 1;</code>
     */
    public fun clearAction() {
      _builder.clearAction()
    }

    /**
     * <code>.kernel.protocol.client.model.v1.RequestHeader header = 2;</code>
     */
    public var header: kernel.protocol.client.model.v1.Base.RequestHeader
      @JvmName("getHeader")
      get() = _builder.getHeader()
      @JvmName("setHeader")
      set(value) {
        _builder.setHeader(value)
      }
    /**
     * <code>.kernel.protocol.client.model.v1.RequestHeader header = 2;</code>
     */
    public fun clearHeader() {
      _builder.clearHeader()
    }
    /**
     * <code>.kernel.protocol.client.model.v1.RequestHeader header = 2;</code>
     * @return Whether the header field is set.
     */
    public fun hasHeader(): kotlin.Boolean {
      return _builder.hasHeader()
    }

    /**
     * <code>.kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessage.RequestContent content = 3;</code>
     */
    public var content: kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContent
      @JvmName("getContent")
      get() = _builder.getContent()
      @JvmName("setContent")
      set(value) {
        _builder.setContent(value)
      }
    /**
     * <code>.kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessage.RequestContent content = 3;</code>
     */
    public fun clearContent() {
      _builder.clearContent()
    }
    /**
     * <code>.kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessage.RequestContent content = 3;</code>
     * @return Whether the content field is set.
     */
    public fun hasContent(): kotlin.Boolean {
      return _builder.hasContent()
    }
  }
  @kotlin.jvm.JvmName("-initializerequestContent")
  public inline fun requestContent(block: kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessageKt.RequestContentKt.Dsl.() -> kotlin.Unit): kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContent =
    kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessageKt.RequestContentKt.Dsl._create(kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContent.newBuilder()).apply { block() }._build()
  public object RequestContentKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContent.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContent.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContent = _builder.build()

      /**
       * <code>string peer_id = 1;</code>
       */
      public var peerId: kotlin.String
        @JvmName("getPeerId")
        get() = _builder.getPeerId()
        @JvmName("setPeerId")
        set(value) {
          _builder.setPeerId(value)
        }
      /**
       * <code>string peer_id = 1;</code>
       */
      public fun clearPeerId() {
        _builder.clearPeerId()
      }

      /**
       * <code>optional string swarm_id = 2;</code>
       */
      public var swarmId: kotlin.String
        @JvmName("getSwarmId")
        get() = _builder.getSwarmId()
        @JvmName("setSwarmId")
        set(value) {
          _builder.setSwarmId(value)
        }
      /**
       * <code>optional string swarm_id = 2;</code>
       */
      public fun clearSwarmId() {
        _builder.clearSwarmId()
      }
      /**
       * <code>optional string swarm_id = 2;</code>
       * @return Whether the swarmId field is set.
       */
      public fun hasSwarmId(): kotlin.Boolean {
        return _builder.hasSwarmId()
      }

      /**
       * <code>.kernel.protocol.client.model.v1.WebRTCICE ice = 3;</code>
       */
      public var ice: kernel.protocol.client.model.v1.Webrtc.WebRTCICE
        @JvmName("getIce")
        get() = _builder.getIce()
        @JvmName("setIce")
        set(value) {
          _builder.setIce(value)
        }
      /**
       * <code>.kernel.protocol.client.model.v1.WebRTCICE ice = 3;</code>
       */
      public fun clearIce() {
        _builder.clearIce()
      }
      /**
       * <code>.kernel.protocol.client.model.v1.WebRTCICE ice = 3;</code>
       * @return Whether the ice field is set.
       */
      public fun hasIce(): kotlin.Boolean {
        return _builder.hasIce()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.copy(block: kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessageKt.Dsl.() -> kotlin.Unit): kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage =
  kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContent.copy(block: kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessageKt.RequestContentKt.Dsl.() -> kotlin.Unit): kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContent =
  kernel.protocol.client.model.v1.TrackerDeliverIceCandidateMessageKt.RequestContentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContentOrBuilder.iceOrNull: kernel.protocol.client.model.v1.Webrtc.WebRTCICE?
  get() = if (hasIce()) getIce() else null

public val kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessageOrBuilder.headerOrNull: kernel.protocol.client.model.v1.Base.RequestHeader?
  get() = if (hasHeader()) getHeader() else null

public val kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessageOrBuilder.contentOrNull: kernel.protocol.client.model.v1.Tracker.TrackerDeliverIceCandidateMessage.RequestContent?
  get() = if (hasContent()) getContent() else null

